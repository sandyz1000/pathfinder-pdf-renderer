macro_rules! is_minus {
    (-) => (1);
    (+) => (0);
}

macro_rules! lut {
    ($($bytes:tt $xbits:tt $ybits:tt $dx:tt $dy:tt $xsign:tt $ysign:tt; )*) => (
        [ $( Entry(
            ($bytes - 2)      <<  0 |        // 2 bits
            ($xbits / 4)      <<  2 |        // 3 bits
            ($ybits / 4)      <<  5 |        // 3 bits
            ($dx)             <<  8 |        // 11 bits 
            ($dy)             << 19 |        // 11 bits
            is_minus!($xsign) << 30 |        // 1 bit
            is_minus!($ysign) << 31          // 1 bit
        ) ),* ]
    )
};

#[derive(Copy, Clone)]
pub struct Entry(u32);
impl Entry {
    pub fn num_bytes(&self) -> usize {
        (2 + self.0 & 0b11) as usize
    }
    pub fn x_bits(&self) -> u8 {
        (4 * (self.0 >> 2) & 0b111) as u8
    }
    pub fn y_bits(&self) -> u8 {
        (4 * (self.0 >> 5) & 0b111) as u8
    }
    pub fn dx(&self) -> u16 {
        ((self.0 >> 8) & 0b111_1111_1111) as u16
    }
    pub fn dy(&self) -> u16 {
        ((self.0 >> 19) & 0b111_1111_1111) as u16
    }
    pub fn x_minus(&self) -> bool {
        self.0 & (1 << 30) != 0
    }
    pub fn y_minus(&self) -> bool {
        self.0 & (1 << 31) != 0
    }
}

pub static TRIPLET_LUT: [Entry; 128] = lut!( /*
bytes   xbits   ybits   dx      dy      xsign   ysign */
2	0	8	0	0	+	-;
2	0	8	0	0	+	+;
2	0	8	0	256	+	-;
2	0	8	0	256	+	+;
2	0	8	0	512	+	-;
2	0	8	0	512	+	+;
2	0	8	0	768	+	-;
2	0	8	0	768	+	+;
2	0	8	0	1024	+	-;
2	0	8	0	1024	+	+;
2	8	0	0	0	-	+;
2	8	0	0	0	+	+;
2	8	0	256	0	-	+;
2	8	0	256	0	+	+;
2	8	0	512	0	-	+;
2	8	0	512	0	+	+;
2	8	0	768	0	-	+;
2	8	0	768	0	+	+;
2	8	0	1024	0	-	+;
2	8	0	1024	0	+	+;
2	4	4	1	1	-	-;
2	4	4	1	1	+	-;
2	4	4	1	1	-	+;
2	4	4	1	1	+	+;
2	4	4	1	17	-	-;
2	4	4	1	17	+	-;
2	4	4	1	17	-	+;
2	4	4	1	17	+	+;
2	4	4	1	33	-	-;
2	4	4	1	33	+	-;
2	4	4	1	33	-	+;
2	4	4	1	33	+	+;
2	4	4	1	49	-	-;
2	4	4	1	49	+	-;
2	4	4	1	49	-	+;
2	4	4	1	49	+	+;
2	4	4	17	1	-	-;
2	4	4	17	1	+	-;
2	4	4	17	1	-	+;
2	4	4	17	1	+	+;
2	4	4	17	17	-	-;
2	4	4	17	17	+	-;
2	4	4	17	17	-	+;
2	4	4	17	17	+	+;
2	4	4	17	33	-	-;
2	4	4	17	33	+	-;
2	4	4	17	33	-	+;
2	4	4	17	33	+	+;
2	4	4	17	49	-	-;
2	4	4	17	49	+	-;
2	4	4	17	49	-	+;
2	4	4	17	49	+	+;
2	4	4	33	1	-	-;
2	4	4	33	1	+	-;
2	4	4	33	1	-	+;
2	4	4	33	1	+	+;
2	4	4	33	17	-	-;
2	4	4	33	17	+	-;
2	4	4	33	17	-	+;
2	4	4	33	17	+	+;
2	4	4	33	33	-	-;
2	4	4	33	33	+	-;
2	4	4	33	33	-	+;
2	4	4	33	33	+	+;
2	4	4	33	49	-	-;
2	4	4	33	49	+	-;
2	4	4	33	49	-	+;
2	4	4	33	49	+	+;
2	4	4	49	1	-	-;
2	4	4	49	1	+	-;
2	4	4	49	1	-	+;
2	4	4	49	1	+	+;
2	4	4	49	17	-	-;
2	4	4	49	17	+	-;
2	4	4	49	17	-	+;
2	4	4	49	17	+	+;
2	4	4	49	33	-	-;
2	4	4	49	33	+	-;
2	4	4	49	33	-	+;
2	4	4	49	33	+	+;
2	4	4	49	49	-	-;
2	4	4	49	49	+	-;
2	4	4	49	49	-	+;
2	4	4	49	49	+	+;
3	8	8	1	1	-	-;
3	8	8	1	1	+	-;
3	8	8	1	1	-	+;
3	8	8	1	1	+	+;
3	8	8	1	257	-	-;
3	8	8	1	257	+	-;
3	8	8	1	257	-	+;
3	8	8	1	257	+	+;
3	8	8	1	513	-	-;
3	8	8	1	513	+	-;
3	8	8	1	513	-	+;
3	8	8	1	513	+	+;
3	8	8	257	1	-	-;
3	8	8	257	1	+	-;
3	8	8	257	1	-	+;
3	8	8	257	1	+	+;
3	8	8	257	257	-	-;
3	8	8	257	257	+	-;
3	8	8	257	257	-	+;
3	8	8	257	257	+	+;
3	8	8	257	513	-	-;
3	8	8	257	513	+	-;
3	8	8	257	513	-	+;
3	8	8	257	513	+	+;
3	8	8	513	1	-	-;
3	8	8	513	1	+	-;
3	8	8	513	1	-	+;
3	8	8	513	1	+	+;
3	8	8	513	257	-	-;
3	8	8	513	257	+	-;
3	8	8	513	257	-	+;
3	8	8	513	257	+	+;
3	8	8	513	513	-	-;
3	8	8	513	513	+	-;
3	8	8	513	513	-	+;
3	8	8	513	513	+	+;
4	12	12	0	0	-	-;
4	12	12	0	0	+	-;
4	12	12	0	0	-	+;
4	12	12	0	0	+	+;
5	16	16	0	0	-	-;
5	16	16	0	0	+	-;
5	16	16	0	0	-	+;
5	16	16	0	0	+	+;
);
